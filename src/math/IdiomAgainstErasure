T<K> x(Class<K> c)
As we know, Java runtime does not retain the parameter type information of an
object. It's a policy called 'erasure'. This is adopted mainly because of
compatibility with older Java which didn't have parameter type.
This short cutting came with fallouts. One main fallout is the object of the
parameterized class does not know which class of object to create when asked to
create an object of the parameter class if it does not have any object of the
parameter class. This is a quite common situation when you are handling a
container which can be empty.
I'll give you a very simple example for this. Think you got a list of numbers and
summing them up. Then what do you expect from an empty list? Should be zero,
isn't it?
But remember, there's no object in the list and the type of the number which is
given as parameter type to the list is gone because of 'erasure'.
The runtime does not have any clue from which class to create 'zero'.
Still there are people arguing that the way allowing empty list was wrong.
I say no it's not. In many cases, it's a good idea to allow any container to be
empty to simplify the calculation. It should not be labeled as 'wrong' only
because it is inconvenient to handle in Java setting.
Anyway. Here I come up with the way to countermeasure 'erasure' with its formula
can be summarized as T<K> x(Class<K> c).
The main problem is literally the 'erasure', losing parameter class.
The main idea to countermeasure to it is to put back the 'class' to objects as
a parameter.
There comes the parameter 'Class<K> c'. Meaning to make it up with just giving
the class object as a method parameter to let the parameterized class to know
which class it is parameterized to.
Not hilarious solution, I know. Because this is redundant already. I'm so sorry.
But still, this redundancy is checked by the compiler. The class given as a
method parameter is parameterized by itself K. Thus compiler can tell you when
this redundant setting has something wrong. I'm easy enough to think it's better
than nothing.
You might say that there is no guarantee for classes to follow a certain rule
which can be handled in an uniform manner. A Class object is passed as a
parameter meaning it would be used in a certain way which is programmed in the
method receiving it. You are correct when you look at the compile time. There is
no enforcement like an interface which can force classes inheriting itself
to follow some guidelines. But the usage of the class parameter should be like
calling some constructors or static methods through reflection mechanism. By the
time those methods are actually called, the conformation is guaranteed.
I never say that this technique exceeds than more common ways like inheritance.
But this is a too good idea to miss especially when you have to cover the problem
caused by 'erasure'.

Additionally, this technique is especially good when applied with builders.
Without question, the class parameter given to a method is redundant. You might
not want it to specify it every time you call any method.
I think that's the time you are thinking this class object belongs to the context.
In that case, you can leave the class object to the builder first and then let
the builder to proliferate among objects.
